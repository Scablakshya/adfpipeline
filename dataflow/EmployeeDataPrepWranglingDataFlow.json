{
	"name": "EmployeeDataPrepWranglingDataFlow",
	"properties": {
		"type": "WranglingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"name": "EmployeeInfoDataset",
					"script": "",
					"dataset": {
						"referenceName": "EmployeeInfoDataset",
						"type": "DatasetReference"
					},
					"typeProperties": {
						"readMode": null
					}
				},
				{
					"name": "EmployeeSalaryDataset",
					"script": "",
					"dataset": {
						"referenceName": "EmployeeSalaryDataset",
						"type": "DatasetReference"
					},
					"typeProperties": {
						"readMode": null
					}
				}
			],
			"sinks": [
				{
					"name": "Sink1",
					"dataset": {
						"referenceName": "DS_SINK_KEY",
						"type": "DatasetReference"
					},
					"script": "sink(input(\n\t\tColumn_1 as string,\n\t\tColumn_2 as string,\n\t\tColumn_3 as string,\n\t\tColumn_4 as string,\n\t\tColumn_5 as string,\n\t\tColumn_6 as string,\n\t\tColumn_7 as string,\n\t\tColumn_8 as string,\n\t\tColumn_9 as string,\n\t\tColumn_10 as string,\n\t\tColumn_11 as string,\n\t\tColumn_12 as string,\n\t\tColumn_13 as string,\n\t\tColumn_14 as string,\n\t\tColumn_15 as string,\n\t\tColumn_16 as string,\n\t\tColumn_17 as string,\n\t\tColumn_18 as string,\n\t\tColumn_19 as string,\n\t\tColumn_20 as string,\n\t\tColumn_21 as string,\n\t\tColumn_22 as string,\n\t\tColumn_23 as string,\n\t\tColumn_24 as string,\n\t\tColumn_25 as string,\n\t\tColumn_26 as string,\n\t\tColumn_27 as string,\n\t\tColumn_28 as string,\n\t\tColumn_29 as string,\n\t\tColumn_30 as string,\n\t\tColumn_31 as string,\n\t\tColumn_32 as string,\n\t\tColumn_33 as string,\n\t\tColumn_34 as string,\n\t\tColumn_35 as string,\n\t\tColumn_36 as string,\n\t\tColumn_37 as string,\n\t\tColumn_38 as string,\n\t\tColumn_39 as string,\n\t\tColumn_40 as string,\n\t\tColumn_41 as string,\n\t\tColumn_42 as string,\n\t\tColumn_43 as string,\n\t\tColumn_44 as string,\n\t\tColumn_45 as string,\n\t\tColumn_46 as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:['SanitizedEmployeeData'],\n\ttruncate: true) ~> Sink1"
				}
			],
			"script": "section Section1;\r\nshared EmployeeInfoDataset = let\r\n  AdfDoc = AzureStorage.BlobContents(\"https://parask.blob.core.windows.net/wdf/EmployeeInfo.csv\"),\r\n  Csv = Csv.Document(AdfDoc, [Delimiter = \",\", Encoding = TextEncoding.Utf8, QuoteStyle = QuoteStyle.Csv]),\r\n  PromotedHeaders = Table.PromoteHeaders(Csv, [PromoteAllScalars = true]),\r\n  TrimmedHeaders = Table.TransformColumnNames(PromotedHeaders, (columnName as text) as text => Text.Trim(columnName))\r\nin\r\n  TrimmedHeaders;\r\nshared EmployeeSalaryDataset = let\r\n  AdfDoc = AzureStorage.BlobContents(\"https://parask.blob.core.windows.net/wdf/EmployeeSalary.csv\"),\r\n  Csv = Csv.Document(AdfDoc, [Delimiter = \",\", Encoding = TextEncoding.Utf8, QuoteStyle = QuoteStyle.Csv]),\r\n  PromotedHeaders = Table.PromoteHeaders(Csv, [PromoteAllScalars = true]),\r\n  TrimmedHeaders = Table.TransformColumnNames(PromotedHeaders, (columnName as text) as text => Text.Trim(columnName))\r\nin\r\n  TrimmedHeaders;\r\nshared UserQuery = let\r\n  Source = EmployeeInfoDataset,\r\n  JoinTransformation = Table.NestedJoin(Source, {\"EmployeeId\"}, EmployeeSalaryDataset, {\"EmployeeId\"}, \"EmployeeSalaryDataset\", JoinKind.Inner),\r\n  ExpandColumns = Table.ExpandTableColumn(JoinTransformation, \"EmployeeSalaryDataset\", {\"BasePay\"}, {\"EmployeeSalaryDataset.BasePay\"}),\r\n  RemoveColumns = Table.RemoveColumns(ExpandColumns, {\"EmployeeId\"}),\r\n  ReplacedQuotes = Table.ReplaceValue(RemoveColumns, \"\"\"\", \"\", Replacer.ReplaceText, {\"FirstName\", \"LastName\", \"City\", \"ZIP\", \"Email\", \"State\"}),\r\n  ConvertToNumber = Table.TransformColumnTypes(ReplacedQuotes, {{\"ZIP\", type number}}),\r\n  AddConditionColumnReplaceNullWithZero = Table.AddColumn(ConvertToNumber, \"SanitizedZip\", each if [ZIP] = null then 0 else [ZIP]),\r\n  #\"Removed columns\" = Table.RemoveColumns(AddConditionColumnReplaceNullWithZero, {\"ZIP\"}),\r\n  #\"Inserted conditional column\" = Table.AddColumn(#\"Removed columns\", \"SanitizedEmail\", each if not Text.Contains([Email], \"@\") then \"\" else if not Text.Contains([Email], \".\") then \"\" else [Email]),\r\n  RemoveEmailColumn = Table.RemoveColumns(#\"Inserted conditional column\", {\"Email\"}),\r\n  MergeColumn = Table.AddColumn(RemoveEmailColumn, \"Name\", each [FirstName] & \" \" & [LastName]),\r\n  RemoveFirstLastName = Table.RemoveColumns(MergeColumn, {\"FirstName\", \"LastName\"}),\r\n  ConvertToDate = Table.TransformColumnTypes(RemoveFirstLastName, {{\"DateOfJoining\", type date}}),\r\n  ConditionColumnEmpType = Table.AddColumn(ConvertToDate, \"EmployeeType\", each if [DateOfJoining] <= #date(2008, 2, 5) then \"Senior\" else \"Junior\"),\r\n  #\"Reordered columns\" = Table.ReorderColumns(ConditionColumnEmpType, {\"Name\", \"SanitizedEmail\", \"DateOfJoining\", \"EmployeeType\", \"EmployeeSalaryDataset.BasePay\", \"SanitizedZip\", \"City\", \"State\"}),\r\n  ConvertIdToNumber = Table.TransformColumnTypes(#\"Reordered columns\", {{\"EmployeeSalaryDataset.BasePay\", type number}}),\r\n  RemoveRowsWithEmptyEmail = Table.SelectRows(ConvertIdToNumber, each [SanitizedEmail] <> null and [SanitizedEmail] <> \"\"),\r\n  AverageSalaryByCity = Table.Group(RemoveRowsWithEmptyEmail, {\"City\"}, {{\"AverageSalary\", each List.Average([EmployeeSalaryDataset.BasePay]), type number}}),\r\n  #\"Filtered rows\" = Table.SelectRows(AverageSalaryByCity, each [AverageSalary] <= 200000)\r\nin\r\n  #\"Filtered rows\";\r\n"
		}
	}
}